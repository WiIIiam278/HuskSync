plugins {
    id 'gg.essential.multi-version'
    id 'gg.essential.defaults'
}

loom.serverOnlyMinecraftJar()

repositories {
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://maven.nucleoid.xyz' }
}

dependencies {
    modImplementation include("net.kyori:adventure-platform-fabric:${fabric_adventure_platform_version}")
    modImplementation include("me.lucko:fabric-permissions-api:${fabric_permissions_api_version}")
    modImplementation include("eu.pb4:sgui:${fabric_sgui_version}")
    modImplementation include("net.william278.uniform:uniform-fabric:1.3.1+${project.name}")
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    implementation include('org.apache.commons:commons-pool2:2.12.1')
    implementation include("com.mysql:mysql-connector-j:$mysql_driver_version")
    implementation include("org.postgresql:postgresql:$postgres_driver_version")
    implementation include("org.mariadb.jdbc:mariadb-java-client:$mariadb_driver_version")
    implementation include("redis.clients:jedis:$jedis_version")
    implementation include("org.xerial.snappy:snappy-java:$snappy_version")

    compileOnly 'net.william278:DesertWell:2.0.4'
    compileOnly 'org.jetbrains:annotations:26.0.2'
    compileOnly 'org.projectlombok:lombok:1.18.36'

    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    implementation include(project(path: ":common"))
    project(":common").configurations.api.dependencies.each { dependency ->
        include(dependency)
    }
}

processResources {
    filesMatching(Arrays.asList("fabric.mod.json", "compatibility.yml")) {
        expand([
                version: version,
                fabric_loader_version: fabric_loader_version,
                fabric_minecraft_version: project.name
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    destinationDirectory.set(file("$projectDir/build/libs"))

    exclude('net.fabricmc:.*')
    exclude('net.kyori:.*')
    exclude '/mappings/*'
}

remapJar {
    dependsOn tasks.shadowJar
    mustRunAfter tasks.shadowJar
    inputFile = shadowJar.archiveFile.get()
    addNestedDependencies = true

    destinationDirectory.set(file("$rootDir/target/"))
    archiveClassifier.set('')
}

shadowJar.finalizedBy(remapJar)